#include "mbed.h"
#include "Motor.h"
#include "adrobo.h"
#include "math.h"

// エンコーダを用いて速度制御するため、下記二つの変数を使用する必要は無い。
static const unsigned int RIGHTOUTPUT = 100;    // 右モータの出力 (%)
static const unsigned int LEFTOUTPUT = 95;  // 左モータの出力 (%)

// 機体のデータ
static const double TIRE_R = 51.0;   // タイヤの直径 (mm)
static const unsigned short int PPR = 12;   // モータ一周あたり何パルスか (Pulse / Rotation)
double circumference = 2 * M_PI * TIRE_R * 0.001;   // 円周 (m)

// 目標のデータ
static const int VMAX = 100;    // 最高速度に対する割合 (実際の最高速度がそもそも不明なため)　(%)
static const int COMMONSPEED = 0;   // ミニトレーサで言うところの comspeed 的なやつ。何の意味があるのかぶっちゃけよくわかってない。

// 実際のデータ
unsigned long long int globaltime = 0;  // スタートしてからの時間 (sec)
unsigned long int n;// 実際の回転数 (回)
unsigned long long int dx;    // 単位時間あたりの走行距離 (m)  // dt = circumference * n
static const unsigned int dt = 1;  // 微分周期 (msec)
unsigned double vt; // 実際の速度 (m / s)    // vt = dx / dt
unsigned long long int period;

// モータの理論値
/*
    理論上の最高速度(m / s)：電池駆動時：2.14｜リポ駆動時：2.19
*/

typedef enum Direction {LEFT, RIGHT};

DigitalOut one(PA0);
DigitalOut two(PA4);
DigitalOut three(PA5);
DigitalOut four(PA6);
BusIn sw(SW2, SW1);
BusOut led(LED5, LED4, LED3, LED2, LED1);
Motor motor_left(MOTOR11, MOTOR12);
Motor motor_right(MOTOR21, MOTOR22);

Ticker time; // 周期的に計算するためのインスタンス
Ticker periodcounter;   // パルスの周波数を計算するためのインスタンス

void count()
{
   period++;
}

float speed(Direction direction)
{
    return M_PI * TIRE_R / PPR / period;
}

void motorcontrol() // モータの速度制御のための関数
{
    /*
        Gp = Kp(目標速度 - 現在速度)
        Gi += Ki(現在速度 - 前回速度) * dt  // これいらないと思う。
        Gd = Kd(現在速度 - 前回速度) / dt
        G = Gp + Gi - Gd
    */
    for(Direction i = 0; i < 2; i++)
    {
        currentspeed = getspeed(i); // エンコーダから取得した値から速度を算出して返す関数。
        Gp = Kp(targetspeed - currentspeed);
#if INTEGRAL_EN
        Gi += Ki(currentspeed - lastspeed) * dt;
#else
        Gi = 0;
#endif
#if DIFFERENTIAL_EN
        Gd = Kd(currentspeed - lastspeed) / dt;
#else
        Gd = 0;
#endif
        G = Gp + Gi - Gd;
        nextspeed = G + COMMONSPEED;
        setspeed(nextspeed, i);
    }
}

void openning()
{
    led = 0b11111;
    wait(3);
    led = 0b00000;
    float i = 1.0f;
    motor_left.setMaxRatio(1.0);
    motor_right.setMaxRatio(1.0);
    wait(3);
    led = 0b11100;
    wait(1);
    led = led << 1;
    wait(1);
    led = led << 1;
    wait(1);
    led = 0b00011;
}

void init()
{
    time.attach_us(&motorcontrol, dt * 1000);
    periodcounter.attach_us(&count, 1000);
}

int main()
{
    init();
    openning();

    while(1)
    {
        motor_left = i;
        motor_right = i;
    }
}



